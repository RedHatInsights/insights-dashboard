import React, { Suspense } from 'react';
import VulnerabilityCard from './VulnerabilityCard';
import Loading from '../../PresentationalComponents/Loading/Loading';
import { vulnerabilityInterceptors, featureFlagsInterceptors } from '../../../cypress/support/interceptors';
import Masonry from 'react-masonry-css';
import { Grid } from '@patternfly/react-core/dist/esm/layouts';
import { BrowserRouter } from 'react-router-dom';

before(() => {
    cy.mockWindowChrome();
});

const breakpointColumnsObj = {
    default: 2,
    992: 1
};

const MountVulnerabilityCard = () => {
    return (
        <BrowserRouter>
            <Grid hasGutter>
                <Masonry
                    breakpointCols={breakpointColumnsObj}
                    className="ins-l-masonry"
                    columnClassName="ins-l-masonry_column"
                >
                    <Suspense fallback={ <Loading /> }>
                        <VulnerabilityCard />
                    </Suspense>;
                </Masonry>
            </Grid>
        </BrowserRouter>
    );
};

describe('Dashboard CVES', () => {
    beforeEach(() => {
        vulnerabilityInterceptors.successful();
        vulnerabilityInterceptors.cvesSuccessful();
        featureFlagsInterceptors.edgeParityDisabled();
        cy.mountWithContext(MountVulnerabilityCard);});
    it('the text in the header text is correct', () => {
        cy.get('div[class="pf-c-content insd-c-width-limiter"]')
        .should('have.text',
            'Red Hat recommends addressing these CVEs with high priority due to heightened risk associated with these security issues. ' +
            'This dataset summary only shows CVEs with Errata.');
    });
    it('the first metrics value is correct ', () => {
        cy.get('div[class="insd-c-dashboard__card--Vulnerabilities--SplitMetrics__content"]').find('a').eq(1).should('have.text', '41');
    });
    it('the second metrics value is correct ', () => {
        cy.get('div[class="insd-c-dashboard__card--Vulnerabilities--SplitMetrics__content"]').find('a').eq(0).should('have.text', '56');
    });

    it('the first toggle is clickable', () => {
        cy.get('button[id="insd-c-dashboard__card-title--Vulnerabilities-toggle-button"]').click();
        cy.get('div[class="insd-c-dashboard__card--Vulnerabilities--SplitMetrics__item"]').should('not.exist');
    });
    it('the second toggle is clickable', () => {
        cy.get('button[id="insd-c-dashboard__card-title--CVESbyCVSS-toggle-button"]').click();
        cy.get('div[class="insd-c-dashboard__card-chart-container"]').should('not.exist');
    });
});

describe('Dashboard CVES Empty state', () => {
    beforeEach(() => {
        vulnerabilityInterceptors['successful empty']();
        vulnerabilityInterceptors.cvesSuccessful();
        featureFlagsInterceptors.edgeParityDisabled();
        cy.mountWithContext(MountVulnerabilityCard);});
    it('the text in the header text is correct', () => {
        cy.get('div[class="pf-c-content insd-c-width-limiter"]')
        .should('have.text',
            'Red Hat recommends addressing these CVEs with high priority due to heightened risk associated with these security issues. ' +
            'This dataset summary only shows CVEs with Errata.');
    });
    it('the first metrics value is correct ', () => {
        cy.get('div[class="insd-c-dashboard__card--Vulnerabilities--SplitMetrics__content"]').find('a').eq(0).should('have.text', '0');
    });
    it('the second metrics value is correct ', () => {
        cy.get('div[class="insd-c-dashboard__card--Vulnerabilities--SplitMetrics__content"]').find('a').eq(1).should('have.text', '0');
    });

    it('the first toggle is clickable', () => {
        cy.get('button[id="insd-c-dashboard__card-title--Vulnerabilities-toggle-button"]').click();
        cy.get('div[class="insd-c-dashboard__card--Vulnerabilities--SplitMetrics__item"]').should('not.exist');
    });
    it('the second toggle is clickable', () => {
        cy.get('button[id="insd-c-dashboard__card-title--CVESbyCVSS-toggle-button"]').click();
        cy.get('div[class="insd-c-dashboard__card-chart-container"]').should('not.exist');
    });
});

describe('Dashboard CVEs Error state', () => {
    beforeEach(() => {
        vulnerabilityInterceptors['failed with server error']();
        featureFlagsInterceptors.edgeParityDisabled();
        cy.mountWithContext(MountVulnerabilityCard);});

    it('the text in the header text is correct', () => {
        cy.get('div[class="pf-c-empty-state insd-c-dashboard__error-state undefined"]')
        .should('have.text',
            ' Vulnerability has experienced an error. Contact Red Hat support if the problem persists. ');
    });
});

const testHybridAffectingFilterURL = () => {
    cy
    .get('a[aria-label="Security rules link"]')
    .invoke('attr', 'href')
    .should('eq', '/insights/vulnerability/cves?affecting=rpmdnf,edge&rule_presence=true');

    cy
    .get('a[aria-label="Known exploit link"]')
    .invoke('attr', 'href')
    .should('eq', '/insights/vulnerability/cves?known_exploit=true&affecting=rpmdnf,edge');
};

const testConventionalAffectingFilterURL = () => {
    cy
    .get('a[aria-label="Security rules link"]')
    .invoke('attr', 'href')
    .should('eq', '/insights/vulnerability/cves?affecting=true&rule_presence=true');

    cy
    .get('a[aria-label="Known exploit link"]')
    .invoke('attr', 'href')
    .should('eq', '/insights/vulnerability/cves?known_exploit=true&affecting=true');
};

describe('Dashboard CVEs links', () => {
    beforeEach(() => {
        vulnerabilityInterceptors.successful();
        vulnerabilityInterceptors.cvesSuccessful();
    });

    it('the link should use only conventional affecting filter value when edge parity is enabled, but there is no edge device', () => {
        featureFlagsInterceptors.edgeParityEnabled();
        vulnerabilityInterceptors.cvesWithoutEdgeSystemsSuccessful();
        cy.mountWithContext(MountVulnerabilityCard);
        cy.wait('@getFeatureFlag');

        testConventionalAffectingFilterURL();
    });

    it('the link should use only conventional affecting filter value when edge parity is disabled and there is an edge device', () => {
        featureFlagsInterceptors.edgeParityDisabled();
        cy.mountWithContext(MountVulnerabilityCard);
        cy.wait('@getFeatureFlag');

        testConventionalAffectingFilterURL();
    });

    it('the link should use hybird affecting filter value when edge parity is enabled and there is an edge device', () => {
        featureFlagsInterceptors.edgeParityEnabled();
        cy.mountWithContext(MountVulnerabilityCard);
        cy.wait('@getFeatureFlag');

        testHybridAffectingFilterURL();
    });
});
