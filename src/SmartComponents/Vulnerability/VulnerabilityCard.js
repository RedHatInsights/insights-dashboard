import * as AppActions from '../../AppActions';
import { Divider } from '@patternfly/react-core/dist/js/components/Divider/Divider';
import {
    TemplateCard,
    TemplateCardBody,
    TemplateCardHeader
} from '../../PresentationalComponents/Template/TemplateCard';
import React, { useEffect } from 'react';
import Loading from '../../PresentationalComponents/Loading/Loading';
import PropTypes from 'prop-types';
import { UI_BASE } from '../../AppConstants';
import { useIntl } from 'react-intl';
import messages from '../../Messages';
import { connect } from 'react-redux';
import { NumberDescription } from '../../../../insights-dashboard/src/PresentationalComponents/NumberDescription/NumberDescription';
import { VerticalDivider } from '../../../../insights-dashboard/src/PresentationalComponents/VerticalDivider/VerticalDivider';
import StackChartTemplate from '../../ChartTemplates/StackChart/StackChartTemplate';
import { CVSS_MAP } from './Constants';

import FailState from '../../PresentationalComponents/FailState/FailState';

/**
 * Vulnerability Card for showing number of critical vulnerabilities
 */

const VulnerabilityCard = ({ fetchVulnerabilities, vulnerabilities, vulnerabilitiesFetchStatus }) => {
    useEffect(() => {
        fetchVulnerabilities();
    }, [fetchVulnerabilities]);

    let  chartData = [];
    let stackChartLegendData = [];
    const intl = useIntl();

    if (vulnerabilitiesFetchStatus === 'fulfilled') {
        let { cves_by_severity: bySeverity, cves_total: cvesTotal } = vulnerabilities;
        chartData = [
            {
                name: 'CVSS 8.0 - 10',
                x: cvesTotal,
                y: bySeverity['8to10'].count,
                fill: '#a30000'
            },
            {
                name: 'CVSS 4.0 - 7.9',
                x: cvesTotal,
                y: bySeverity['4to7.9'].count,
                fill: '#ec7a08'
            },
            {
                name: 'CVSS 0.0 - 3.9',
                x: cvesTotal,
                y: bySeverity['0to3.9'].count,
                fill: '#f0ab00'
            }
        ];

        stackChartLegendData = chartData.map(item => ({ name: `${item.name}`, class: item.name,  symbol: { fill: `${item.fill}`, type: 'circle' } }));
    }

    const legendClick = chartData.map((data) => {
        const cvss = data.name.split('CVSS ')[1];
        return `${UI_BASE}/vulnerability/cves?cvss_filter=${CVSS_MAP[cvss]}`;
    });

    if (vulnerabilitiesFetchStatus === 'rejected') {
        return (
            <TemplateCard isFilled={ false } className='ins-c-card__vulnerability' data-ouia-safe>
                <TemplateCardHeader title={ intl.formatMessage(messages.vulnerabilitiesTitle) }/>
                <TemplateCardBody><FailState appName='Vulnerability'/></TemplateCardBody>
            </TemplateCard>
        );
    }

    return (
        <TemplateCard isFilled={ false } className='ins-c-card__vulnerability' data-ouia-safe={ vulnerabilitiesFetchStatus !== 'pending' }>
            <TemplateCardHeader title={ intl.formatMessage(messages.vulnerabilitiesTitle) }/>
            <TemplateCardBody>
                {vulnerabilitiesFetchStatus !== 'fulfilled' ? <Loading /> :
                    <NumberDescription
                        data={ intl.formatMessage(messages.vulnerabilitiesTotalItems, { total: vulnerabilities.cves_total }) }
                        dataSize="md"
                        linkDescription={ intl.formatMessage(messages.cvesImpactingSystems, { cves: vulnerabilities.cves_total }) }
                        layout="horizontal"
                        link={ `${UI_BASE}/vulnerability/` }
                    />
                }
                {vulnerabilitiesFetchStatus !== 'fulfilled' ? <Loading /> :
                    <StackChartTemplate
                        ariaDesc={ intl.formatMessage(messages.cvesImpactingSystems, { cves: vulnerabilities.cves_total }) }
                        ariaTitle="Vulnerabilities chart"
                        height={ 40 }
                        width={ 600 }
                        maxWidth={ 600 }
                        legendHeight={ 36 }
                        legendWidth={ 600 }
                        data={ chartData }
                        legendData={ stackChartLegendData }
                        legendClick={ legendClick }
                    />
                }
            </TemplateCardBody>
            <Divider/>
            {vulnerabilitiesFetchStatus !== 'fulfilled' ? <Loading /> :
                <TemplateCardBody isFilled={ false } isHorizontalLayout="true">
                    <NumberDescription
                        data={ vulnerabilities.recent_cves.last90days }
                        dataSize="md"
                        linkDescription={ intl.formatMessage(messages.lastxdays, { days: 90 }) }
                        link={ `${UI_BASE}/vulnerability/cves?publish_date=last90` }
                    />
                    <VerticalDivider/>
                    <NumberDescription
                        data={ vulnerabilities.recent_cves.last30days }
                        dataSize="md"
                        linkDescription={ intl.formatMessage(messages.lastxdays, { days: 30 }) }
                        link={ `${UI_BASE}/vulnerability/cves?publish_date=last30` }
                    />
                    <VerticalDivider/>
                    <NumberDescription
                        data={ intl.formatMessage(messages.latestVulnerabilitiesTotal,
                            { totalLatest: vulnerabilities.recent_cves.last7days }
                        ) }
                        dataSize="md"
                        linkDescription={ intl.formatMessage(messages.lastxdays, { days: 7 }) }
                        link={ `${UI_BASE}/vulnerability/cves?publish_date=last7` }
                    />
                </TemplateCardBody>
            }
        </TemplateCard>
    );
};

VulnerabilityCard.propTypes = {
    fetchVulnerabilities: PropTypes.func,
    vulnerabilities: PropTypes.object,
    vulnerabilitiesFetchStatus: PropTypes.string
};

export default connect(
    ({ DashboardStore }) => ({
        vulnerabilities: DashboardStore.vulnerabilities,
        vulnerabilitiesFetchStatus: DashboardStore.vulnerabilitiesFetchStatus
    }),
    dispatch => ({
        fetchVulnerabilities: (url) => dispatch(AppActions.fetchVulnerabilities(url))
    })
)(VulnerabilityCard);
