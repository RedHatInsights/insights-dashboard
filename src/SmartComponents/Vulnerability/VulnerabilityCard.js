import './VulnerabilityCard.scss';

import * as AppActions from '../../AppActions';

import {
    Button,
    Skeleton,
    Spinner,
    TextContent,
    Tooltip,
    TooltipPosition
} from '@patternfly/react-core/dist/esm/components';
import { Flex } from '@patternfly/react-core/dist/esm/layouts';
import React, { useEffect, useMemo, useState } from 'react';
import { fitContent, TableText, textCenter } from '@patternfly/react-table';
import { TemplateCard, TemplateCardBody, TemplateCardHeader } from '../../PresentationalComponents/Template/TemplateCard';
import { useDispatch, useSelector } from 'react-redux';

import { CompoundCard } from '../../PresentationalComponents/Template/CompoundCard';
import { ExpandableCardTemplate } from '../../PresentationalComponents/Template/ExpandableCardTemplate';
import FailState from '../../PresentationalComponents/FailState/FailState';
import InfoIcon from '../../Icons/InfoIcon';
import { PieChart } from '../../ChartTemplates/PieChart/PieChartTemplate';
import { global_disabled_color_100 } from '@patternfly/react-tokens';
import messages from '../../Messages';
import { useIntl } from 'react-intl';
import InsightsLink from '@redhat-cloud-services/frontend-components/InsightsLink/InsightsLink';
import { useFeatureFlag } from '../../Utilities/Hooks';
import Api from '../../Utilities/Api';
import { VULNERABILITIES_CVES_URL } from '../../AppConstants';
import { Table, TableBody, TableHeader } from '@patternfly/react-table/deprecated';

const VulnerabilityCard = () => {
    const intl = useIntl();
    const pieChartPadding = { bottom: 0, left: 0, right: 0, top: 0 };
    const dispatch = useDispatch();
    const vulnerabilities = useSelector(({ DashboardStore }) => DashboardStore.vulnerabilities);
    const vulnerabilitiesFetchStatus = useSelector(({ DashboardStore }) => DashboardStore.vulnerabilitiesFetchStatus);
    const selectedTags = useSelector(({ DashboardStore }) => DashboardStore.selectedTags);
    const workloads = useSelector(({ DashboardStore }) => DashboardStore.workloads);
    const SID = useSelector(({ DashboardStore }) => DashboardStore.SID);
    const strong = str => <strong>{str}</strong>;
    const [accountHasEdgeDevices, setAccountHasEdgeDevices] = useState(false);
    const isEdgeParityEnabled = useFeatureFlag('vulnerability.edge_parity');

    const iconTooltip = text => <Tooltip
        key={text}
        position={TooltipPosition.right}
        content={<div>{text}</div>}>
        <span aria-label='Action' className='insd-c-info-icon pf-v5-u-ml-sm'>
            <InfoIcon />
        </span>
    </Tooltip>;

    const columns = [
        {
            title: 'CVSS score'
        },
        {
            title: 'CVE totals',
            transforms: [textCenter],
            cellTransforms: [textCenter]
        },
        {
            title: (
                <span>Known exploits{iconTooltip(intl.formatMessage(messages.exploitedCveTooltip))}</span>
            ),
            transforms: [fitContent]
        }];

    useEffect(() => {
        const options = {
            ...workloads?.SAP?.isSelected && { sap_system: true },
            ...workloads?.['Ansible Automation Platform']?.isSelected
            && { ansible: 'true' },
            ...workloads?.['Microsoft SQL']?.isSelected
            && { mssql: 'true' },
            ...SID?.length > 0 && { sap_sids: SID },
            ...selectedTags?.length > 0 && { tags: selectedTags }
        };
        const fetchVulnerabilities = options => dispatch(AppActions.fetchVulnerabilities(options));

        fetchVulnerabilities(options);
    }, [workloads, SID, selectedTags, dispatch]);

    useEffect(() => {
        const checkEdgeDevices = () => {
            Api.get(VULNERABILITIES_CVES_URL, {}, { limit: 1 }).
            then(
                ({ data } = {}) => setAccountHasEdgeDevices(data?.meta?.system_count_per_type?.edge > 0 || false)
            );
        };

        checkEdgeDevices();
    }, []);

    const affectingFilterValue = accountHasEdgeDevices && isEdgeParityEnabled ? 'rpmdnf,edge' : 'true';

    const [chartData, rows] = useMemo(() => {
        let { cves_by_severity: bySeverity } = vulnerabilities;

        const chartData = [{
            x: 'CVSS 8.0 - 10',
            from: 8.0,
            to: 10.0,
            y: bySeverity?.['8to10']?.count,
            fill: '#a30000',
            data: bySeverity?.['8to10']
        },
        {
            x: 'CVSS 4.0 - 7.9',
            from: 4.0,
            to: 7.9,
            y: bySeverity?.['4to7.9']?.count,
            fill: '#ec7a08',
            data: bySeverity?.['4to7.9']
        },
        {
            x: 'CVSS 0.0 - 3.9',
            from: 0.0,
            to: 3.9,
            y: bySeverity?.['0to3.9']?.count,
            fill: '#f0ab00',
            data: bySeverity?.['0to3.9']
        }];

        const legendLink = (from, to) => `/cves?cvss_from=${from}&cvss_to=${to}`;

        const rows = chartData.map(({ data, from, to, fill }) => [{
            title: <TableText wrapModifier='nowrap' className='insd-c-legend__dot'
                style={{ '--insd-c-legend__dot--BackgroundColor': `${fill}` }}>
                <InsightsLink to={legendLink(from, to)} app='vulnerability'>{`${from}.0 - ${to}`}</InsightsLink>
            </TableText>
        }, {
            title:
                <InsightsLink
                    app='vulnerability'
                    to={legendLink(from, to)}
                    className='pf-v5-u-text-align-center'
                >
                    {vulnerabilitiesFetchStatus === 'fulfilled'
                        ? data.count
                        : <Skeleton width="50px" style={{ margin: 'auto' }} />
                    }
                </InsightsLink>,
            props: { textCenter: true }
        }, {
            title:
                <InsightsLink
                    app='vulnerability'
                    to={legendLink(from, to) + '&known_exploit=true'}
                    className='pf-v5-u-text-align-center'
                >
                    {vulnerabilitiesFetchStatus === 'fulfilled'
                        ? data.known_exploits === undefined
                            ? 'N/A'
                            : data.known_exploits
                        : <Skeleton width="50px" style={{ margin: 'auto' }} />
                    }
                </InsightsLink>,
            props: { textCenter: true }
        }]);

        return [chartData, rows];
    }, [vulnerabilitiesFetchStatus, vulnerabilities]);

    if (vulnerabilitiesFetchStatus === 'rejected') {
        return <TemplateCard isFilled={false} className='ins-c-card__vulnerability' data-ouia-safe>
            <TemplateCardHeader title={intl.formatMessage(messages.vulnerabilitiesTitle)} />
            <TemplateCardBody><FailState appName='Vulnerability' /></TemplateCardBody>
        </TemplateCard>;
    }

    return (
        <CompoundCard
            className='insd-c-dashboard-card-parent insd-c-dashboard__card--compound--Vulnerabilities'
            data-ouia-safe={vulnerabilitiesFetchStatus !== 'pending'}
        >
            <ExpandableCardTemplate
                appName='Vulnerabilities'
                className='insd-m-toggle-right-on-md insd-m-short-header'
                data-ouia-safe={vulnerabilitiesFetchStatus !== 'pending'}
                title={intl.formatMessage(messages.vulnerabilitiesTitle)}
                isExpanded={JSON.parse(localStorage.getItem('dashboard_expanded_vulnerability1') || 'true')}
                isExpandedCallback={isExpanded => localStorage.setItem('dashboard_expanded_vulnerability1', isExpanded)}
                body={
                    <TemplateCardBody className='insd-c-dashboard__card--Vulnerabilities__card-body'>
                        <Flex
                            direction={{ default: 'column' }}
                            spaceItems={{ default: 'spaceItemsLg' }}
                            flexWrap={{ default: 'nowrap' }}
                        >
                            <TextContent
                                className='insd-c-width-limiter'
                                style={{ '--insd-c-width-limiter--MaxWidth': '54ch' }}>
                                <p className='pf-v5-u-font-size-sm'>
                                    {intl.formatMessage(messages.vulnerabilityMessage)}
                                </p>
                            </TextContent>
                            <div className="insd-c-dashboard__card--Vulnerabilities--SplitMetrics">
                                <div className="insd-c-dashboard__card--Vulnerabilities--SplitMetrics__item">
                                    <div className="insd-c-dashboard__card--Vulnerabilities--SplitMetrics__content">
                                        <InsightsLink className='pf-v5-u-font-size-2xl pf-v5-u-color-100'
                                            aria-label='Security rules link'
                                            app='vulnerability'
                                            to={`/cves?affecting=${affectingFilterValue}&rule_presence=true`}
                                            rel='noreferrer'
                                        >
                                            {vulnerabilitiesFetchStatus === 'fulfilled'
                                                ? vulnerabilities.rules_cves_total
                                                : <Skeleton fontSize="lg" width="50px" style={{ margin: 'auto' }}/>
                                            }
                                        </InsightsLink>
                                        <TextContent>
                                            <p className='pf-v5-u-font-size-sm'>
                                                {intl.formatMessage(messages.cvesImpactingOneOrMoreSystems, {
                                                    cves: vulnerabilities.rules_cves_total,
                                                    strong
                                                })}
                                            </p>
                                        </TextContent>
                                    </div>
                                    <InsightsLink
                                        aria-label='Security rules link'
                                        app='vulnerability'
                                        to={`/cves?affecting=${affectingFilterValue}&rule_presence=true`}
                                        rel='noreferrer'
                                    >
                                        <Button variant='secondary' size='sm'>
                                            {intl.formatMessage(messages.vulnerabilityCardCTAText)}
                                        </Button>
                                    </InsightsLink>
                                </div>
                                <div className="insd-c-dashboard__card--Vulnerabilities--SplitMetrics__item">
                                    <div className="insd-c-dashboard__card--Vulnerabilities--SplitMetrics__content">
                                        <InsightsLink
                                            aria-label='Known exploit link'
                                            className='pf-v5-u-font-size-2xl pf-v5-u-color-100'
                                            app='vulnerability'
                                            to={`/cves?known_exploit=true&affecting=${affectingFilterValue}`} rel='noreferrer'
                                        >
                                            {vulnerabilitiesFetchStatus === 'fulfilled'
                                                ? vulnerabilities.exploited_cves_count
                                                : <Skeleton fontSize="lg" width="50px" style={{ margin: 'auto' }}/>
                                            }
                                        </InsightsLink>
                                        <TextContent>
                                            <p className='pf-v5-u-font-size-sm'>
                                                {intl.formatMessage(messages.knownExploitsOneOrMoreSystems, {
                                                    cves: vulnerabilities.exploited_cves_count,
                                                    strong,
                                                    tooltip: () => iconTooltip(intl.formatMessage(messages.exploitedCveTooltip))
                                                })}
                                            </p>
                                        </TextContent>
                                    </div>
                                    <InsightsLink
                                        aria-label='Known exploit link'
                                        app='vulnerability'
                                        to={`/cves?known_exploit=true&affecting=${affectingFilterValue}`}
                                        rel='noreferrer'
                                    >
                                        <Button rel='noreferrer' variant='secondary' size='sm'>
                                            {intl.formatMessage(messages.vulnerabilityCardKnownExploitsCTAText)}
                                        </Button>
                                    </InsightsLink>
                                </div>
                            </div>
                        </Flex>
                    </TemplateCardBody>
                } />
            <ExpandableCardTemplate
                appName='CVESbyCVSS'
                className='insd-m-toggle-right-on-md'
                data-ouia-safe={vulnerabilitiesFetchStatus !== 'pending'}
                title={intl.formatMessage(messages.cveByCvssScoreTitle)}
                isExpanded={JSON.parse(localStorage.getItem('dashboard_expanded_vulnerability2') || 'true')}
                isExpandedCallback={isExpanded => localStorage.setItem('dashboard_expanded_vulnerability2', isExpanded)}
                hasDivider
                body={
                    <TemplateCardBody className='ins-c-cves-by-cvss-card-body pf-v5-u-pt-sm'>
                        <div className="insd-c-dashboard__card-chart-container">
                            <div className="insd-c-dashboard__card-pie-chart">
                                {vulnerabilitiesFetchStatus === 'fulfilled'
                                    ? <PieChart
                                        ariaDesc={intl.formatMessage(messages.cvesImpactingSystems,
                                            { cves: vulnerabilities.cves_total })}
                                        ariaTitle='Vulnerabilities chart'
                                        constrainToVisibleArea={true}
                                        data={chartData}
                                        padding={pieChartPadding}
                                        colorScale={vulnerabilitiesFetchStatus === 'fulfilled' && vulnerabilities.cves_total === 0 ?
                                            [global_disabled_color_100.value] : ['#a30000', '#ec7a08', '#f0ab00']}
                                    />
                                    : <Spinner style={{ width: 100 }}/>
                                }
                            </div>
                            <div className="insd-c-dashboard__card-pie-chart-legend">
                                <Table
                                    borders={false}
                                    aria-label='Simple Table'
                                    cells={columns}
                                    rows={rows}
                                    className='insd-m-no-styling'
                                    gridBreakPoint=''
                                >
                                    <TableHeader />
                                    <TableBody />
                                </Table>
                            </div>
                        </div>
                    </TemplateCardBody>
                } />
        </CompoundCard>
    );
};

export default VulnerabilityCard;
